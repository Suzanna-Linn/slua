
-- TABLES


-- Array Tables


local tabFruits = { "Apple", "Orange", "Banana", "Pear" }

local myFruits = table.concat( tabFruits, ", " )
print( myFruits )


-- Print the fruits with a for loop and ipairs()
for i, fruit in ipairs(tabFruits) do
    print(`index {i} is {fruit}`)
end
--> index 1 is Apple
--> index 2 is Orange
--> index 3 is Banana
--> index 4 is Pear


-- Print only the names
for _, fruit in ipairs(tabFruits) do
    print(fruit)
end
--> Apple
--> Orange
--> Banana
--> Pear


-- Dictionary Tables


-- Create a dictionary-like table for fruit quantities
local tabFruitQuantities = {
    Apple = 5,
    Orange = 10,
    Banana = 12
}


-- Get the quantity of oranges
print( tabFruitQuantities.Orange )  -- > 10


-- Get the quantity of passion fruits
print( tabFruitQuantities["Passion Fruit"] )  -- > nil


-- Add a new fruit, "Grape", with a quantity of 20
tabFruitQuantities.Grape = 20


-- Add a new fruit, "Passion Fruit", with a quantity of 3
tabFruitQuantities["Passion Fruit"] = 3


-- We got more apples! Let's update the count.
tabFruitQuantities.Apple = 15
print( tabFruitQuantities.Apple )  -- > 15


-- We sold all the oranges. Let's remove them.
tabFruitQuantities.Orange = nil
print( tabFruitQuantities.Orange )  -- > nil


-- Print the fruits with a for loop and pairs()
for name, quantity in pairs(tabFruitQuantities) do
    print(`{name} has a quantity of {quantity}`)
end
-- > Grape has a quantity of 20
-- > Apple has a quantity of 15
-- > Passion Fruit has a quantity of 3
-- > Banana has a quantity of 12



-- Nested Tables


-- A nested table of fruits
local tabFruitData = {
    -- The "Apple" entry is a table itself
    Apple = {
        color = "Red",
        averageWeight = 0.15, -- in kilograms
        pricePerKg = 2.50
    },

    -- The "Orange" entry is another table
    Orange = {
        color = "Orange",
        averageWeight = 0.20,
        pricePerKg = 1.75
    },

    -- The "Banana" entry is also a table
    Banana = {
        color = "Yellow",
        averageWeight = 0.12,
        pricePerKg = 1.99
    },
}


-- Let's get the information for the Apple
local appleInfo = tabFruitData.Apple

print("Apple color:", appleInfo.color)  -- > Apple color: Red
print("Apple price:", appleInfo.pricePerKg)  -- > Apple price: 2.5


-- Another way to get the information
print("Orange price per kg: ", tabFruitData.Orange.pricePerKg)
-- > Orange price per kg: 1.75
print("Banana's average weight: ", tabFruitData.Banana.averageWeight)
-- > Banana's average weight: 0.12


-- Let's add "Grape" to our data
tabFruitData.Grape = {
    color = "Purple",
    averageWeight = 0.005,
    pricePerKg = 4.50
}

print("Grape color: ", tabFruitData.Grape.color)
-- > Grape color: Purple


-- The price of apples just went up!
tabFruitData.Apple.pricePerKg = 2.99
print("New price of an Apple: ", tabFruitData.Apple.pricePerKg)
-- > New price of an Apple: 2.99


-- Let's remove the "Banana" and all its data
tabFruitData.Banana = nil


-- A safe way to check is to see if the main entry exists first
if tabFruitData.Banana == nil then
    print("There is no data for Banana.")
end
-- > There is no data for Banana.
