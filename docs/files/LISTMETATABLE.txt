
-- list table 1 (index data)

local function listTable()
	local data = {}

	return setmetatable({}, {
		__index = data,
	})
end


-- list table 2 (index data, newindex)

local function listTable()
	local data = {}

	return setmetatable({}, {
		__index = data,
		__newindex = function(t, k, v)
			if type(k) ~= "number" or k % 1 ~= 0 or k < 1 then
				print("Key must be a positive integer")
			elseif k > #data + 1 then
				print("Sparse assignment not allowed, next index is " .. (#data + 1))
			elseif v == nil and k ~= #data then
				print("Cannot set to nil")
			else
				data[k] = v
			end
		end,
	})
end


-- list table 3 (index data/table, newindex)

local function listTable()
	local data = {}

	return setmetatable({}, {
		__index = function(t, k)
			if type(k) == "number" then
				return data[k]
			elseif type(table[k]) == "function" then
				return function(t, ...)
					return table[k](data, ...)
				end
			end
		end,
		__newindex = function(t, k, v)
			if type(k) ~= "number" or k % 1 ~= 0 or k < 1 then
				print("Key must be a positive integer")
			elseif k > #data + 1 then
				print("Sparse assignment not allowed, next index is " .. (#data + 1))
			elseif v == nil and k ~= #data then
				print("Cannot set to nil")
			else
				data[k] = v
			end
		end,
	})
end


-- list table 4 (index data/table, newindex, len)

local function listTable()
	local data = {}

	return setmetatable({}, {
		__index = function(t, k)
			if type(k) == "number" then
				return data[k]
			elseif type(table[k]) == "function" then
				return function(t, ...)
					return table[k](data, ...)
				end
			end
		end,
		__newindex = function(t, k, v)
			if type(k) ~= "number" or k % 1 ~= 0 or k < 1 then
				print("Key must be a positive integer")
			elseif k > #data + 1 then
				print("Sparse assignment not allowed, next index is " .. (#data + 1))
			elseif v == nil and k ~= #data then
				print("Cannot set to nil")
			else
				data[k] = v
			end
		end,
		__len = function(t)
			return #data
		end,
	})
end


-- list table 5 (index data/table, newindex, len, metatable)

local function listTable()
	local data = {}

	return setmetatable({}, {
		__index = function(t, k)
			if type(k) == "number" then
				return data[k]
			elseif type(table[k]) == "function" then
				return function(t, ...)
					return table[k](data, ...)
				end
			end
		end,
		__newindex = function(t, k, v)
			if type(k) ~= "number" or k % 1 ~= 0 or k < 1 then
				print("Key must be a positive integer")
			elseif k > #data + 1 then
				print("Sparse assignment not allowed, next index is " .. (#data + 1))
			elseif v == nil and k ~= #data then
				print("Cannot set to nil")
			else
				data[k] = v
			end
		end,
		__len = function(t)
			return #data
		end,
                __metatable = "Access not allowed"
	})
end


-- list table 6 (index data/table, newindex, len, metatable, iter)

local function listTable()
	local data = {}

	return setmetatable({}, {
		__index = function(t, k)
			if type(k) == "number" then
				return data[k]
			elseif type(table[k]) == "function" then
				return function(t, ...)
					return table[k](data, ...)
				end
			end
		end,
		__newindex = function(t, k, v)
			if type(k) ~= "number" or k % 1 ~= 0 or k < 1 then
				print("Key must be a positive integer")
			elseif k > #data + 1 then
				print("Sparse assignment not allowed, next index is " .. (#data + 1))
			elseif v == nil and k ~= #data then
				print("Cannot set to nil")
			else
				data[k] = v
			end
		end,
		__len = function(t)
			return #data
		end,
                __ipairs = function(t)
                        return ipairs(data)
                end,
                __metatable = "Access not allowed"
	})
end
