-- nonsense random iterator

function iterRandom(mag)
    return function()
        local num = ll.Frand(mag) // 1
        return if num == 0 then nil else num
    end
end

for random in iterRandom(10) do
  print(random)  -- > 8, 6, 4, 2, 9, 4, 1, 3, 2, 5
end


-- fibonacci iterator

local function iterFibonacci(limit)
    local a, b = 0, 1
    local count = 0

    return function()
        local res = a
        a, b = b, a + b 
        count += 1
        return if count > limit then nil else res
    end
end

for fibo in iterFibonacci(10) do
    print(fibo)  -- 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
end


-- closure counter (one counter)

function createCounter()
    local count = 0

    return function()
        count += 1
        return count
    end
end

counter = createCounter()

print( counter() ) -- 1
print( counter() ) -- 2
print( counter() ) -- 3


-- closure counter (two counters)

function createCounter()
    local count = 0

    return function()
        count += 1
        return count
    end
end

counter1 = createCounter()
counter2 = createCounter()

print( counter1() ) -- 1
print( counter1() ) -- 2
print( counter2() ) -- 1
print( counter1() ) -- 3
print( counter2() ) -- 2


-- iterator sorted table

local dictionary = {
    ["bug"] = "An undocumented feature that only appears during demos.",
    ["function"] = "A magical incantation that sometimes returns what you expect.",
    ["nil"] = "Where your data goes when you forget to save.",
    ["loop"] = "The reason your computer fan sounds like a jet engine.",
    ["true"] = "What your code becomes five minutes before a deadline.",
    ["false"] = "What your tests return after deploying to production.",
    ["local"] = "A variable that feels safe... until you forget it's shadowed.",
    ["require"] = "The gateway to spaghetti if not used wisely.",
    ["table"] = "A versatile container of hope, chaos, and off-by-one errors.",
    ["print"] = "Your last desperate cry for help.",
    ["assert"] = "The optimistic whisper that says, 'This will *definitely* work.'",
    ["thread"] = "What holds your sanity together — until it doesn't.",
    ["coroutine"] = "Like a thread, but sneakier.",
    ["metatable"] = "The reason your object suddenly speaks fluent wizard.",
    ["comment"] = "Ancient runes, written by a developer who’s long since vanished.",
}

function sortedPairs(tab, fn)
    local keys = {}
    local i = 0
    for key in pairs(tab) do
        table.insert(keys, key)
    end
    table.sort(keys, fn)

    return function()
        i += 1
        local key = keys[i]
        return if key == nil then nil else key, tab[key]
    end
end

for word, definition in sortedPairs(dictionary) do
    print(word .. ": " .. definition)
end

for word, definition in sortedPairs(dictionary, function(a, b)
        return tostring(a) > tostring(b)
    end) do
    print(word .. ": " .. definition)
end

local iter = pairs(dictionary)
local word, definition

repeat
    word, definition = iter(dictionary, word)
    if word ~= nil then
        print(word .. ": " .. definition)
    end
until word == nil
