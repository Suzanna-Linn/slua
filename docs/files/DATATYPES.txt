-- datatypes and operators


-- datatypes

local myCounter = 10
local myValue = 3.75
local myMessage = "Hello"
local isOn = true

print( typeof( myCounter ) )  -- > number
print( typeof( myValue ) )    -- > number
print( typeof( myMessage ) )  -- > string
print( typeof( isOn ) )       -- > boolean



-- type boolean

local isOn = true
local hasIt = false

print( isOn )   -- > true
print( hasIt )  -- > false

print( typeof( isOn ) )   -- > boolean
print( typeof( hasIt ) )  -- > boolean


-- constants TRUE / FALSE coming from LSL

-- DON'T USE THEM!!!

print( TRUE )   -- > 1
print( FALSE )  -- > 0

print( typeof( TRUE ) )   -- > number
print( typeof( FALSE ) )  -- > number


-- boolean and if

local isDone = false

if isDone then
    print("done")
else
    print("not yet")
end
-- > not yet


-- DON'T DO THIS!!!
local isDone = FALSE

if isDone then  -- WRONG!!!
    print("done")
else
    print("not yet")
end
-- > done



-- type nil

local myVar

print( myVar )           -- > nil

print( typeof( myVar ) ) -- > nil


local myMessage = "Hello"
print( myMessage )  -- > Hello

-- typo: m instead of M
print( mymessage ) -- > nil

myMessage = nil
print( myMessage )  -- > nil



-- typecasting

myMessage = myCounter  -- DON'T DO THIS!!!
print( typeof( myMessage ) )  -- > number

myMessage = tostring( myCounter )
print( typeof( myMessage ) )  -- > string

myCounter = tonumber( "1234" )
print( typeof( myCounter ) )  -- > number



-- SLua datatypes

-- type uuid

local me = ll.GetOwner()
print( typeof( me ) )  -- > uuid

local id = uuid("0f16c0e1-384e-4b5f-b7ce-886dda3bce41")
print( typeof( id ) )  -- > uuid


-- type vector

local myVec = vector(50, 25, 0)
print( typeof( myVec) )  -- > vector

print( myVec )  -- > <50.00000, 25.00000, 0.00000>

print( myVec.x )  -- > 50
print( myVec.y )  -- > 25
print( myVec.z )  -- > 0

myVec = vector(myVec.x, myVec.y, 10)

local posZ = ll.GetPos().z 

myVec = tovector("<2.5, 1.5, 5>")
print( myVec )  -- > <2.50000, 1.50000, 5.00000>


-- type rotation

local myRot = rotation(10, 20, 30, 1)
print( typeof( myRot) )  -- > quaternion

print( myRot )  -- > <10.00000, 20.00000, 30.00000, 1.00000>

print( myRot.x )  -- > 10
print( myRot.y )  -- > 20
print( myRot.z )  -- > 30
print( myRot.s )  -- > 1

myRot = rotation(myRot.x, myRot.y, myRot.z, -myRot.s)

local rotS = ll.GetRot().s

myRot = torotation("<5.5, 15.5, 25.5, 3>")
print( myRot )  -- > <5.50000, 15.50000, 25.50000, 3.00000>



-- arithmetic operators

print( 5 + 3 )  -- > 8
print( 6 - 4 )  -- > 2
print( 4 * 8 )  -- > 32

local quantity = 15
print( -quantity )  -- > -15


print( 17 / 10 )   -- > 1.7
print( 17 // 10 )  -- > 1
print( 17 % 10 )   -- > 7

local intdiv = 17 // 10
local modulo = 17 % 10
print( intdiv * 10 + modulo )  -- > 17


local base = 2;
local exp = 3;
print( base ^ exp )  -- > 8


-- concatenation operator

local greet = "Hello" .. " " .. "world"
print( greet )  -- > Hello world


-- compound operators

local a = 10

a += 1   -- a = a + 1
a -= 1   -- a = a - 1
a *= 5   -- a = a * 5
a /= 2   -- a = a / 2
a //= 3  -- a = a // 3
a %= 5   -- a = a % 5
a ^= 4   -- a = a ^ 4

local s = "Hello"
s ..= " world"  -- s = s .. " world"


-- relational operators

local small = 10
local mid = 20
local big = 30

print( mid == (small + big) / 2 )   -- > true
print( big ~= small )               -- > true
print( small < mid )                -- > true
print( mid > big )                  -- > false
print( mid <= big )                 -- > true
print( small >= mid )               -- > false


-- logical operators

local this = true
local that = false

print( not that )      -- > true
print( this and that ) -- > false
print( this or that )  -- > true
